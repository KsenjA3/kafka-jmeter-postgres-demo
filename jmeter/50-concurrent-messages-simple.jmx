<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="50 Concurrent Messages Simple Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">Simple test plan for 50 concurrent messages with end-to-end timing</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="50 Concurrent Messages Thread Group">
        <intProp name="ThreadGroup.num_threads">3</intProp> <!-- количество одновременных users -->
        <intProp name="ThreadGroup.ramp_time">1</intProp><!-- запуск users за это время -->
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp> <!-- количество итераций -->
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">D:\JavaProjects\kafka-jmeter-postgres-demo\jmeter\messages.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">messageContent</stringProp>	
          <stringProp name="delimiter">@</stringProp><!-- разделитель  в CSV-файле переход на новую строку -->
          <boolProp name="quotedData">false</boolProp><!-- значения в CSV-файле не заключены в кавычки -->
          <boolProp name="recycle">false</boolProp><!-- Повторять при достижении конца файла -->
          <boolProp name="stopThread">true</boolProp><!-- Остановить поток при достижении конца файла -->
          <stringProp name="shareMode">all</stringProp><!-- CSV-файл открывается один раз и совместно используется всеми потоками. Каждый поток будет считывать уникальную строку из файла, пока все строки не будут использованы или все потоки не завершатся. -->
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Message to API">
          <intProp name="HTTPSampler.connect_timeout">5000</intProp>
          <intProp name="HTTPSampler.response_timeout">30000</intProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/messages</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${messageContent}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
        <!-- Проверка кода ответа -->
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Expected response code 200</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>


    <!-- Новый Thread Group для ожидания -->
    <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Wait for DB Update" enabled="true">
      <intProp name="ThreadGroup.num_threads">1</intProp>
      <intProp name="ThreadGroup.ramp_time">1</intProp>
      <longProp name="ThreadGroup.delay">0</longProp>
      <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
        <stringProp name="LoopController.loops">1</stringProp>
        <boolProp name="LoopController.continue_forever">false</boolProp>
      </elementProp>
    </ThreadGroup>
    <hashTree>
      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Initial Count" enabled="true">
        <intProp name="HTTPSampler.connect_timeout">5000</intProp>
        <intProp name="HTTPSampler.response_timeout">10000</intProp>
        <stringProp name="HTTPSampler.domain">localhost</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path">/api/messages/count</stringProp>
        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
        <stringProp name="HTTPSampler.method">GET</stringProp>
        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
      </HTTPSamplerProxy>
      <hashTree>
        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Initial Count" enabled="true">
          <stringProp name="JSONPostProcessor.referenceNames">initialCount</stringProp>
          <stringProp name="JSONPostProcessor.jsonPathExprs">$.count</stringProp>
          <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
        </JSONPostProcessor>
        <hashTree/>
        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Calculate Expected Count" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">
				def metricsPerMessage = 4850
				def totalThreads = 3 // или получить из проперти/vars, если нужно
				def initialCountStr = vars.get("initialCount") ?: "0"
				def initialCount = initialCountStr.toInteger()
				def expectedCount = initialCount + metricsPerMessage * totalThreads
				vars.put("expectedCount", expectedCount.toString())
				vars.put("startWaitTime", String.valueOf(System.currentTimeMillis()))
          </stringProp>
        </JSR223PostProcessor>
        <hashTree/>
      </hashTree>

      <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait for Database Update" enabled="true">
          <stringProp name="WhileController.condition">
            ${__groovy(Integer.parseInt(vars.get('currentCount') ?: '0') &lt; Integer.parseInt(vars.get('expectedCount') ?: '0'))}
          </stringProp>

      </WhileController>

      <hashTree>

        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Wait 200ms" enabled="true">
          <stringProp name="ConstantTimer.delay">200</stringProp>
        </ConstantTimer>
        <hashTree/>
        
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Database Count" enabled="true">
          <intProp name="HTTPSampler.connect_timeout">5000</intProp>
          <intProp name="HTTPSampler.response_timeout">10000</intProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/messages/count</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>

          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Current Count" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">currentCount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.count</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>

        </hashTree>

        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler: Vars after count check" enabled="true"/>
        <hashTree/>

        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Log Vars to jmeter.log" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">
              log.info("currentCount=" + vars.get("currentCount"))
              log.info("expectedCount=" + vars.get("expectedCount"))
              log.info("initialCount=" + vars.get("initialCount"))
          </stringProp>
        </JSR223Sampler>
        <hashTree/>
        
      </hashTree>




      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Log Wait Result" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">
            def waited = (System.currentTimeMillis() - Long.parseLong(vars.get("startWaitTime"))) / 1000
            log.info("Ожидание завершено. Текущее количество: " + vars.get("currentCount") +
                    ", Ожидалось: " + vars.get("expectedCount") +
                    ", Ждали секунд: " + waited)
        </stringProp>
      </JSR223Sampler>
      <hashTree/>

      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Force Thread Stop" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">ctx.getThread().stop()</stringProp>
      </JSR223Sampler>
      <hashTree/>

    </hashTree>


    <!-- Слушатель результатов -->
    <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
      <boolProp name="ResultCollector.error_logging">false</boolProp> <!--  -->
      <objProp>
        <name>saveConfig</name><!-- Ошибки не будут записываться в отдельный лог. -->
        <value class="SampleSaveConfiguration"><!--  -->
          <time>true</time><!-- общее время, которое потребовалось для выполнения запроса, от отправки до получения последнего байта ответа -->
          <latency>true</latency><!-- время от отправки запроса до получения первого байта ответа. для понимания времени "чистой" обработки на сервере без учета времени передачи всего ответа. -->
          <timestamp>true</timestamp><!-- Записывает точное время (дата и время), когда был запущен сэмпл. -->
          <success>true</success><!-- Записывает, был ли запрос успешным или нет -->
          <label>true</label><!-- !!!!!!!!!!Записывает имя сэмпла, которое вы дали в JMeter  -->
          <code>true</code><!-- Записывает HTTP-код ответа  -->
          <message>true</message><!-- Записывает текстовое сообщение, связанное с HTTP-кодом ответа -->
          <threadName>true</threadName><!-- Записывает имя потока, который выполнил запрос, для отслеживания индивидуального поведения потоков. -->
          <dataType>true</dataType><!-- Записывает тип данных ответа  -->
          <encoding>false</encoding><!-- Отключает запись кодировки ответа.  -->
          <assertions>true</assertions><!-- Записывает информацию о том, прошли ли утверждения (Assertions) для данного сэмпла. -->
          <subresults>true</subresults><!-- Записывает данные для всех под-сэмплов (например, если в запросе есть перенаправления или вложенные запросы). -->
          <responseData>false</responseData><!-- Отключает запись всего тела ответа. Важно: Установка этого значения в true может значительно увеличить размер файлов отчетов и потребление памяти, особенно при больших объемах ответов. Обычно это отключают для нагрузочного тестирования. -->
          <samplerData>false</samplerData><!-- Отключает запись деталей запроса (URL, заголовки запроса, тело запроса и т.д.). Также может значительно увеличить размер отчета, если включено. -->
          <xml>false</xml><!-- Отключает сохранение результатов в XML-формате.  -->
          <fieldNames>true</fieldNames><!-- Включает строку заголовка с именами полей в CSV-файле отчета. Это делает CSV-файл более читабельным. -->
          <responseHeaders>false</responseHeaders><!-- Отключает запись заголовков HTTP-ответа. -->
          <requestHeaders>false</requestHeaders><!-- Отключает запись заголовков HTTP-запроса. -->
          <responseDataOnError>false</responseDataOnError><!-- Отключает запись тела ответа только в случае ошибки. Если responseData уже true, этот параметр игнорируется. Если responseData false, но responseDataOnError true, тело ответа будет записано только для ошибочных сэмплов -->
          <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage><!--  -->
          <assertionsResultsToSave>0</assertionsResultsToSave><!--  -->
          <bytes>true</bytes><!--  -->
          <sentBytes>true</sentBytes><!--  -->
          <url>true</url><!--  -->
          <threadCounts>true</threadCounts><!--  -->
          <idleTime>true</idleTime><!--  -->
          <connectTime>true</connectTime><!--  -->
        </value>
      </objProp>
	  <!-- JMeter не будет сохранять результаты этого ResultCollector в файл -->
	  <!-- результаты сохраняются в файл указаный командой bash -->
      <stringProp name="filename"></stringProp>
    </ResultCollector>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
